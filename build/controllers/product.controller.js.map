{"version":3,"sources":["../../src/controllers/product.controller.js"],"names":["objectid","Types","ObjectId","productList","Promise","resolve","reject","Product","find","err","data","console","log","productDetail","findById","prdId","addProduct","product","name","slugify","price","link","save","success","msg","updateProduct","productData","findByIdAndUpdate","deleteProduct","findByIdAndRemove","text","toString","toLowerCase","replace","module","exports"],"mappings":"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","file":"product.controller.js","sourcesContent":["import Product from '../models/product.model';\r\nimport { Types } from 'mongoose';\r\nconst objectid = Types.ObjectId;\r\n\r\nconst productList = () => {\r\n    return new Promise((resolve, reject) => {\r\n        Product.find({}, function (err, data) {\r\n            if (err) {\r\n                console.log(err);\r\n                reject(err);\r\n            } else {\r\n                resolve(data);\r\n            }\r\n        });\r\n    });\r\n};\r\n\r\nconst productDetail = prdId => {\r\n    return new Promise((resolve, reject) => {\r\n        Product.findById({ \"_id\": objectid(prdId) }, (err, data) => {\r\n            if (err) {\r\n                console.log(err);\r\n                reject(err);\r\n            } else {\r\n                resolve(data);\r\n            }\r\n        });\r\n    });\r\n};\r\n\r\nconst addProduct = data => {\r\n    console.log(data);\r\n    let product = new Product({\r\n        \"prd_cat_id\": '5b658f1d0ac3634aec65e891',\r\n        \"prd_name\": data.name,\r\n        \"prd_slug\": slugify(data.name),\r\n        \"prd_type\": \"DIGITAL\",\r\n        \"prd_price\" : data.price || 1,\r\n        \"prd_link\" : data.link\r\n    });\r\n    return new Promise((resolve, reject) => {\r\n        product.save(err => {\r\n            if (err) {\r\n                console.log(err);\r\n                reject(err);\r\n            } else {\r\n                resolve({ success: true, msg: 'Product added' });\r\n            }\r\n        });\r\n    });\r\n};\r\n\r\nconst updateProduct = (prdId, data) => {\r\n    let productData = {\r\n        \"prd_cat_id\": '5b51cba256d2b82cd040c8c9',\r\n        \"prd_name\": data.name,\r\n    };\r\n    return new Promise((resolve, reject) => {\r\n        Product.findByIdAndUpdate({ \"_id\": objectid(prdId) }, productData, err => {\r\n            if (err)\r\n                reject(err);\r\n            else\r\n                resolve({ success: true, msg: 'Product updated' });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nconst deleteProduct = prdId => {\r\n    return new Promise((resolve, reject) => {\r\n        Product.findByIdAndRemove({ \"_id\": objectid(prdId) }, err => {\r\n            if (err)\r\n                reject(err)\r\n            else\r\n                resolve({ success: true, msg: 'Product deleted' })\r\n        });\r\n    });\r\n}\r\n\r\nfunction slugify(text) {\r\n    return text.toString().toLowerCase()\r\n        .replace(/\\s+/g, '-')        // Replace spaces with -\r\n        .replace(/[^\\w\\-]+/g, '')   // Remove all non-word chars\r\n        .replace(/\\-\\-+/g, '-')      // Replace multiple - with single -\r\n        .replace(/^-+/, '')          // Trim - from start of text\r\n        .replace(/-+$/, '');         // Trim - from end of text\r\n}\r\n\r\nmodule.exports = {\r\n    productList: productList,\r\n    productDetail: productDetail,\r\n    addProduct: addProduct,\r\n    updateProduct: updateProduct,\r\n    deleteProduct: deleteProduct,\r\n}"]}