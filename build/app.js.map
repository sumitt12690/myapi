{"version":3,"sources":["../src/app.js"],"names":["dotenv","config","silent","mongoose","Promise","global","connect","useNewUrlParser","catch","err","console","log","app","set","path","join","__dirname","use","bodyParser","json","urlencoded","extended","express","static","category","product","req","res","statusCode","status","message","data","next","Error","render","error","get"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;AACAA,iBAAOC,MAAP,CAAc;AACVC,YAAQ;AADE,CAAd;;AAIA;AACAC,mBAASC,OAAT,GAAmBC,OAAOD,OAA1B;AACA;;;AAGAD,mBAASG,OAAT,CAAiB,+DAAjB,EAAkF,EAAEC,iBAAiB,IAAnB,EAAlF,EAA6GC,KAA7G,CAAmH,UAACC,GAAD,EAAS;AACxHC,YAAQC,GAAR,CAAY,sCAAZ;AACH,CAFD;;AAKA;AACA,IAAMC,MAAM,wBAAZ;;AAEA;AACAA,IAAIC,GAAJ,CAAQ,OAAR,EAAiBC,eAAKC,IAAL,CAAUC,SAAV,EAAqB,SAArB,CAAjB;AACAJ,IAAIC,GAAJ,CAAQ,aAAR,EAAuB,KAAvB;;AAEA;AACAD,IAAIK,GAAJ,CAAQ,sBAAO,UAAP,CAAR;;AAEA;AACAL,IAAIK,GAAJ,CAAQC,qBAAWC,IAAX,EAAR;AACAP,IAAIK,GAAJ,CAAQC,qBAAWE,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;;AAEA;AACAT,IAAIK,GAAJ,CAAQ,6BAAR;AACAL,IAAIK,GAAJ,CAAQ,qBAAR;;AAEA;AACAL,IAAIK,GAAJ,CAAQK,kBAAQC,MAAR,CAAeT,eAAKC,IAAL,CAAUC,SAAV,EAAqB,UAArB,CAAf,CAAR;;AAEA;AACAJ,IAAIK,GAAJ,CAAQ,WAAR,EAAqBO,kBAArB;AACAZ,IAAIK,GAAJ,CAAQ,UAAR,EAAoBQ,iBAApB;;AAEAb,IAAIK,GAAJ,CAAQ,GAAR,EAAa,UAAUS,GAAV,EAAeC,GAAf,EAAoB;AAC7BA,QAAIC,UAAJ,GAAiB,GAAjB,CAD6B,CACR;AACrBD,QAAIR,IAAJ,CAAS,EAAEU,QAAQ,SAAV,EAAqBC,SAAS,WAA9B,EAA2CC,MAAM,EAAjD,EAAT;AACH,CAHD;;AAKA;AACAnB,IAAIK,GAAJ,CAAQ,UAACS,GAAD,EAAMC,GAAN,EAAWK,IAAX,EAAoB;AACxBtB,YAAQC,GAAR,CAAY,WAAZ;AACA,QAAMF,MAAM,IAAIwB,KAAJ,CAAU,WAAV,CAAZ;AACAxB,QAAIoB,MAAJ,GAAa,GAAb;AACAG,SAAKvB,GAAL;AACH,CALD;;AAOA;AACAG,IAAIK,GAAJ,CAAQ,UAACR,GAAD,EAAMiB,GAAN,EAAWC,GAAX,EAAgBK,IAAhB,EAAyB;AAC7BL,QAAIE,MAAJ,CAAWpB,IAAIoB,MAAJ,IAAc,GAAzB;AACAF,QAAIO,MAAJ,CAAW,OAAX,EAAoB;AAChBJ,iBAASrB,IAAIqB,OADG;AAEhBK,eAAOvB,IAAIwB,GAAJ,CAAQ,KAAR,MAAmB,aAAnB,GAAmC3B,GAAnC,GAAyC;AAFhC,KAApB;AAIAC,YAAQC,GAAR,CAAYC,IAAIwB,GAAJ,CAAQ,KAAR,CAAZ;AACAJ;AACH,CARD;;kBAUepB,G;AACf","file":"app.js","sourcesContent":["import path from 'path';\r\nimport express from 'express';\r\nimport dotenv from 'dotenv';\r\nimport logger from 'morgan';\r\nimport cors from 'cors';\r\nimport bodyParser from 'body-parser';\r\nimport cookieParser from 'cookie-parser';\r\nimport category from './routes/category';\r\nimport product from './routes/product';\r\nimport mongoose from 'mongoose';\r\n\r\n// use dotenv\r\ndotenv.config({\r\n    silent: true,\r\n});\r\n\r\n//mongoose connection\r\nmongoose.Promise = global.Promise;\r\n/**\r\n * Set up default mongoose connection\r\n */\r\nmongoose.connect(\"mongodb://mlab123:mlab123@ds141611.mlab.com:41611/sumitt12690\", { useNewUrlParser: true }).catch((err) => {\r\n    console.log('*** Can Not Connect to Mongo Server:');\r\n});\r\n\r\n\r\n// Express app setup\r\nconst app = express();\r\n\r\n// view engine\r\napp.set('views', path.join(__dirname, './views'));\r\napp.set('view engine', 'pug');\r\n\r\n// logger\r\napp.use(logger('combined'));\r\n\r\n// body parser\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\n\r\n// cookie parser\r\napp.use(cookieParser());\r\napp.use(cors());\r\n\r\n// serve static files from 'public'\r\napp.use(express.static(path.join(__dirname, './public')));\r\n\r\n// use routes\r\napp.use('/category', category);\r\napp.use('/product', product);\r\n\r\napp.use('/', function (req, res) {\r\n    res.statusCode = 200;//send the appropriate status code\r\n    res.json({ status: \"success\", message: \"Mongo API\", data: {} });\r\n});\r\n\r\n// catch 404 and forward to error handler\r\napp.use((req, res, next) => {\r\n    console.log('not found');\r\n    const err = new Error('Not Found');\r\n    err.status = 404;\r\n    next(err);\r\n});\r\n\r\n// error handlers\r\napp.use((err, req, res, next) => {\r\n    res.status(err.status || 500);\r\n    res.render('error', {\r\n        message: err.message,\r\n        error: app.get('env') === 'development' ? err : {},\r\n    });\r\n    console.log(app.get('env'));\r\n    next();\r\n});\r\n\r\nexport default app;\r\n/*\r\nvar Schema = mongoose.Schema;\r\nvar testSchema = new Schema({\r\n    testvalue: Number,\r\n});\r\nvar Test = mongoose.model(\"Test\", testSchema);\r\napp.get('/save-array', function (req, res) {\r\n    var myArray = ['1', '2', '3', '4'];\r\n    // myArray.forEach(function (value) {\r\n    //     var Testobj = new Test({\r\n    //         testvalue: value,\r\n    //     });\r\n    //     Testobj.save(function (error) {\r\n    //         console.log(\"Your value has been saved!\"+value);\r\n    //         if (error) {\r\n    //             console.error(error);\r\n    //         }\r\n    //     });\r\n    // });\r\n    async.eachSeries(myArray, function (value, callback) {\r\n        var Testobj = new Test({\r\n            testvalue: value,\r\n        });\r\n        Testobj.save(function (error) {\r\n            console.log(\"Your value has been saved!\" + value);\r\n            if (error) {\r\n                console.error(error);\r\n            }\r\n            callback();\r\n        });\r\n    });\r\n});\r\n*/"]}